/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.todolist.controllers;

import com.example.todolist.model.TaskDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Task", description = "the Task API")
@RequestMapping("${openapi.task.base-path:}")
public interface TaskApi {

    /**
     * DELETE /task/{id_task} : Delete a task
     *
     * @param idTask The ID of the task to delete. (required)
     * @return OK (status code 200)
     *         or  (status code 400)
     */
    @Operation(
        operationId = "deleteTask",
        summary = "Delete a task",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "400", description = "")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/task/{id_task}"
    )
    ResponseEntity<Void> deleteTask(
        @Parameter(name = "id_task", description = "The ID of the task to delete.", required = true) @PathVariable("id_task") Long idTask
    );


    /**
     * GET /task : Get all tasks
     *
     * @return OK (status code 200)
     *         or  (status code 404)
     */
    @Operation(
        operationId = "getAllTasks",
        summary = "Get all tasks",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task",
        produces = { "application/json" }
    )
    ResponseEntity<List<TaskDto>> getAllTasks(
        
    );


    /**
     * GET /task/{state} : Get tasks by state filter
     *
     * @param state State to filter tasks by. (required)
     * @return OK (status code 200)
     *         or  (status code 400)
     */
    @Operation(
        operationId = "getTasksByStateFilter",
        summary = "Get tasks by state filter",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task/{state}",
        produces = { "application/json" }
    )
    ResponseEntity<List<TaskDto>> getTasksByStateFilter(
        @Parameter(name = "state", description = "State to filter tasks by.", required = true) @PathVariable("state") String state
    );


    /**
     * PATCH /task/{id_task} : Modify the state of a task
     *
     * @param idTask The ID of the task to modify. (required)
     * @return OK (status code 200)
     *         or  (status code 400)
     */
    @Operation(
        operationId = "patchModifyTaskState",
        summary = "Modify the state of a task",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "400", description = "")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/task/{id_task}"
    )
    ResponseEntity<Void> patchModifyTaskState(
        @Parameter(name = "id_task", description = "The ID of the task to modify.", required = true) @PathVariable("id_task") Long idTask
    );


    /**
     * POST /task : Create new task
     *
     * @param taskDto The task data to create (required)
     * @return Created (status code 201)
     *         or  (status code 400)
     */
    @Operation(
        operationId = "postCreateNewTask",
        summary = "Create new task",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created"),
            @ApiResponse(responseCode = "400", description = "")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> postCreateNewTask(
        @Parameter(name = "TaskDto", description = "The task data to create", required = true) @Valid @RequestBody TaskDto taskDto
    );


    /**
     * PUT /task/{id_task} : Modify information of a task
     *
     * @param idTask The ID of the task to update. (required)
     * @param taskDto The updated task data (required)
     * @return OK (status code 200)
     *         or  (status code 400)
     */
    @Operation(
        operationId = "putModifyInformationTask",
        summary = "Modify information of a task",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "400", description = "")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/task/{id_task}",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> putModifyInformationTask(
        @Parameter(name = "id_task", description = "The ID of the task to update.", required = true) @PathVariable("id_task") Long idTask,
        @Parameter(name = "TaskDto", description = "The updated task data", required = true) @Valid @RequestBody TaskDto taskDto
    );

}
